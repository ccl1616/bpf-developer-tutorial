# SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
OUTPUT := .output
CLANG ?= clang
ARCH ?= $(shell uname -m | sed 's/x86_64/x86/' \
			 | sed 's/arm.*/arm/' \
			 | sed 's/aarch64/arm64/' \
			 | sed 's/ppc64le/powerpc/' \
			 | sed 's/mips.*/mips/' \
			 | sed 's/riscv64/riscv/' \
			 | sed 's/loongarch64/loongarch/')

# Use system libbpf instead of building custom one
USERSPACE_CFLAGS := -g -Wall -fno-omit-frame-pointer -I/usr/include
USERSPACE_LINKER_FLAGS := -lbpf -lelf -lz -lpthread -lm -lrt -ldl
BPF_CFLAGS := -g -O2 -target bpf -D__TARGET_ARCH_$(ARCH)

# Get Clang's default includes on this system
CLANG_BPF_SYS_INCLUDES ?= $(shell $(CLANG) -v -E - </dev/null 2>&1 \
	| sed -n '/<...> search starts here:/,/End of search list./{ s| \(/.*\)|-idirafter \1|p }')

APPS = offcputime oncputime

# Test programs
TEST_PROGS = tests/test_combined tests/test_multithread tests/double_bandwidth

ifeq ($(V),1)
	Q =
	msg =
else
	Q = @
	msg = @printf '  %-8s %s%s\n'					\
		      "$(1)"						\
		      "$(patsubst $(abspath $(OUTPUT))/%,%,$(2))"	\
		      "$(if $(3), $(3))";
	MAKEFLAGS += --no-print-directory
endif

define allow-override
  $(if $(or $(findstring environment,$(origin $(1))),\
            $(findstring command line,$(origin $(1)))),,\
    $(eval $(1) = $(2)))
endef

$(call allow-override,CC,$(CROSS_COMPILE)cc)
$(call allow-override,LD,$(CROSS_COMPILE)ld)

.PHONY: all
all: $(APPS) $(TEST_PROGS)

.PHONY: tests
tests: $(TEST_PROGS)

.PHONY: all-with-tests
all-with-tests: all tests

.PHONY: clean
clean:
	$(call msg,CLEAN)
	$(Q)rm -rf $(OUTPUT) $(APPS) $(TEST_PROGS)

$(OUTPUT):
	$(call msg,MKDIR,$@)
	$(Q)mkdir -p $@

# Generate vmlinux.h from kernel BTF (like eBPF-CPUAanlysis)
vmlinux.h: | $(OUTPUT)
	$(call msg,GEN-VMLINUX,$@)
	$(Q)bpftool btf dump file /sys/kernel/btf/vmlinux format c > $(OUTPUT)/vmlinux.h

# Build BPF code
$(OUTPUT)/%.bpf.o: %.bpf.c $(wildcard %.h) | $(OUTPUT) vmlinux.h
	$(call msg,BPF,$@)
	$(Q)$(CLANG) $(BPF_CFLAGS) $(CLANG_BPF_SYS_INCLUDES) \
		     -I$(OUTPUT) \
		     -c $(filter %.c,$^) -o $(patsubst %.bpf.o,%.tmp.bpf.o,$@)
	$(Q)bpftool gen object $@ $(patsubst %.bpf.o,%.tmp.bpf.o,$@)

# Generate BPF skeletons
$(OUTPUT)/%.skel.h: $(OUTPUT)/%.bpf.o | $(OUTPUT)
	$(call msg,GEN-SKEL,$@)
	$(Q)bpftool gen skeleton $< > $@

# Build user-space code
$(patsubst %,$(OUTPUT)/%.o,$(APPS)): %.o: %.skel.h

$(OUTPUT)/%.o: %.c $(wildcard %.h) | $(OUTPUT)
	$(call msg,CC,$@)
	$(Q)$(CC) $(USERSPACE_CFLAGS) -I$(OUTPUT) -c $(filter %.c,$^) -o $@

# Build application binary
$(APPS): %: $(OUTPUT)/%.o | $(OUTPUT)
	$(call msg,BINARY,$@)
	$(Q)$(CC) $(USERSPACE_CFLAGS) $^ $(USERSPACE_LINKER_FLAGS) -o $@

# Build test programs
tests/test_combined: tests/test_combined.c
	$(call msg,TEST,$@)
	$(Q)$(CC) $(USERSPACE_CFLAGS) $< -o $@ -lpthread

tests/test_multithread: tests/test_multithread.c
	$(call msg,TEST,$@)
	$(Q)$(CC) $(USERSPACE_CFLAGS) $< -o $@ -lpthread -lm

tests/double_bandwidth: tests/double_bandwidth.c
	$(call msg,TEST,$@)
	$(Q)$(CC) $(USERSPACE_CFLAGS) -D_GNU_SOURCE -std=c11 -O3 $< -o $@ -lpthread -lm

# delete failed targets
.DELETE_ON_ERROR:

# keep intermediate (.skel.h, .bpf.o, etc) targets
.SECONDARY:
